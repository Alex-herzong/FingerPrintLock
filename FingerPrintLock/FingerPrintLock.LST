C51 COMPILER V9.01   FINGERPRINTLOCK                                                       12/07/2019 23:08:07 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FINGERPRINTLOCK
OBJECT MODULE PLACED IN FingerPrintLock.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FingerPrintLock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include <reg52.h>
   3          #include <stdio.h> 
   4          #include <string.h>
   5          #include "AS608.h"
   6          unsigned char count;              //0.5ms次数标识
   7          sbit pwm =P1^0 ;                  //PWM信号输出,连舵机黄线
   8          sbit Relay =P1^1 ;
   9          sbit check = P2^0;
  10          unsigned char jd;                 //角度标识
  11          uchar xdata Data_buff[MAX];               //初始化结构体
  12          struct as608 As_608_data={0};
  13          int judge=1;
  14          char locked = 0;
  15          
  16          void delayms(unsigned int i)      //延时
  17          {
  18   1          unsigned int j,k;
  19   1          for(j=i; j>0; j--)
  20   1              for(k=110; k>0; k--);
  21   1      }
  22          
  23          void Time0_Init()                 //定时器0初始化
  24          {  
  25   1          TH0  = (65536-440)/256;               //1.0851us一个计数周期
  26   1          TL0  = (65536-440)%256;               //初始化中断器
  27   1          TMOD = 0x01;                  //定时器0工作在方式1
  28   1          IE = 0x82;                    //IE=0x82=1000 0010 等价于 EA=1 开总中断  ET0=1 开定时器0中断
  29   1          TR0=1;                        //开定时器0
  30   1      }
  31            
  32          void Time0_Int() interrupt 1      //中断程序
  33          {
  34   1          TH0  = (65536-440)/256;               //1.0851us一个计数周期
  35   1          TL0  = (65536-440)%256;               //重新初始化中断器
  36   1          if(count< jd)
  37   1          {
  38   2              pwm=0;                    //高电平次数小于目标角度，PWM输出高电平（一次高电平输出0.5ms）
  39   2                  count=(count+1);          //总次数加1
  40   2              count=count%40;           //确保总次数始终保持低于40 即保持周期为20ms
  41   2          } else {
  42   2              pwm=1;                    //高电平次数大于等于目标角度，PWM输出低电平
  43   2              count=(count+1);          //总次数加1
  44   2              count=count%40;           //确保总次数始终保持低于40 即保持周期为20ms
  45   2          }
  46   1      
  47   1      }
  48          
  49          /*
  50          void SendOneByte(unsigned char c) //通过串口发送一个字节
  51          {
  52              SBUF = c;
  53              while(!TI);
  54              TI = 0;
  55          }
C51 COMPILER V9.01   FINGERPRINTLOCK                                                       12/07/2019 23:08:07 PAGE 2   

  56          */
  57          
  58          /*
  59          char putchar(char c)                      //putchar 函数重写
  60          {
  61                  SendOneByte(c);
  62                  return c;
  63          }
  64          */
  65          void UART_Init(void)              //波特率已最高为57600，12T  晶振11.0592MHz
  66          {
  67   1              SCON = 0x50;
  68   1              TMOD &= 0x0f;
  69   1          TMOD = 0x20;
  70   1          PCON = 0x80;
  71   1          TH1 = 0xFF;
  72   1          TL1 = 0xFF; 
  73   1              ET1 = 0;
  74   1          TR1 = 1;
  75   1      }
  76          
  77          //*******************************************  
  78          //函数名：Send_Bytes
  79          //功能：发送多个字节
  80          //参数：*c:首地址    len：长度
  81          //指令代码：无
  82          //返回值：  无
  83          //******************************************* 
  84          void Send_Bytes(uchar *c,uchar len)
  85          {
  86   1              uchar i=0;
  87   1              for(i=0;i<len;i++)
  88   1              {
  89   2              SBUF = *(c+i);
  90   2              while(!TI);
  91   2              TI = 0;
  92   2              }
  93   1      }
  94          
  95          //*******************************************  
  96          //函数名：Receive_Bytes
  97          //功能：接收多个字节
  98          //参数：*c:首地址    len：长度
  99          //指令代码：无
 100          //返回值：  无
 101          //******************************************* 
 102          char Receive_Bytes(uchar *c,uchar len)
 103          {
 104   1              uchar i=0;
 105   1              uchar time=200;
 106   1              for(i=0;i<len;i++)
 107   1              {
 108   2                      while(!RI && time--)
 109   2                      {
 110   3                              if(time<=1)
 111   3                                      return MI_NOTAGERR;
 112   3                      }
 113   2              *(c+i)=SBUF;
 114   2                      RI=0;
 115   2          }   
 116   1              return MI_OK;
 117   1      }
C51 COMPILER V9.01   FINGERPRINTLOCK                                                       12/07/2019 23:08:07 PAGE 3   

 118          
 119          //*******************************************  
 120          //函数名：PS_GetImage
 121          //功能：从传感器上读入图像存于图像缓冲区
 122          //参数：无
 123          //指令代码：01H
 124          //返回值：有
 125          //******************************************* 
 126          char PS_GetImage()
 127          {
 128   1      
 129   1              uchar *ps2=     "\xef\x01\xff\xff\xff\xff\x01\x00\x03\x01\x00\x05";      //指令码
 130   1      
 131   1              Send_Bytes(ps2,12);                    //发送指令码
 132   1      
 133   1              while(RI==0);
 134   1      
 135   1              if(Receive_Bytes(Data_buff,12))   //接收应答包
 136   1              {
 137   2                      return MI_ERR;  
 138   2              }               
 139   1      
 140   1              if(Data_buff[9]==0x00&&Data_buff[11]==0x0a)                //判断确认码是否成功   后面为校验和判断
 141   1              {                                                          
 142   2                      return MI_OK;   
 143   2              }
 144   1              
 145   1              return MI_ERR;  
 146   1      }
 147          
 148          //*******************************************  
 149          //函数名：PS_GenChar
 150          //功能：将 ImageBuffer(图像缓冲区) 中的原始图像生成指纹特征文件存于 CharBuffer1 或 CharBuffer2
 151          //参数：BufferID(特征缓冲区号)
 152          //指令代码：02H
 153          //返回值：有
 154          //******************************************* 
 155          char PS_GenChar(uchar BufferID)
 156          {
 157   1      
 158   1              uchar *ps1=     "\xef\x01\xff\xff\xff\xff\x01\x00\x04\x02\x01\x00\x08";  //存放CharBuffer1的指令码
 159   1              uchar *ps2=     "\xef\x01\xff\xff\xff\xff\x01\x00\x04\x02\x02\x00\x09";  //存放CharBuffer1的指令码
 160   1              if(BufferID==0x01)
 161   1              {
 162   2                      Send_Bytes(ps1,13);                    //发送指令码
 163   2              }
 164   1              else
 165   1              {
 166   2                      Send_Bytes(ps2,13);                    //发送指令码
 167   2              }
 168   1              
 169   1              while(RI==0);
 170   1      
 171   1              if(Receive_Bytes(Data_buff,12))   //接收应答包
 172   1              {
 173   2                      return MI_ERR;  
 174   2              }               
 175   1              
 176   1              if(Data_buff[9]==0x00&&Data_buff[11]==0x0a)                //判断确认码是否成功   后面为校验和判断
 177   1              {                                                          
 178   2                      return MI_OK;   
 179   2              }
C51 COMPILER V9.01   FINGERPRINTLOCK                                                       12/07/2019 23:08:07 PAGE 4   

 180   1              
 181   1              return MI_ERR;  
 182   1      }
 183          
 184          //*******************************************  
 185          //函数名：PS_Search
 186          //功能：以 CharBuffer1 或 CharBuffer2 中的特征文件搜索整个或部分指纹库。若搜索到，则返回页码
 187          //参数：BufferID， (StartPage(起始页)，PageNum（页数）)(默认从0到300全局搜索)
 188          //指令代码：04H
 189          //返回值：确认码、页码（ID）
 190          //******************************************* 
 191          char PS_Search(uchar BufferID)
 192          {
 193   1      
 194   1              uchar *ps1=     "\xef\x01\xff\xff\xff\xff\x01\x00\x08\x04\x01\x00\x00\x01\x2b\x00\x3a";  //存放CharBuffer
             -1的指令码
 195   1              uchar *ps2=     "\xef\x01\xff\xff\xff\xff\x01\x00\x08\x04\x02\x00\x00\x01\x2b\x00\x3b";
 196   1              
 197   1      
 198   1              if(BufferID==0x01)
 199   1              {
 200   2                      Send_Bytes(ps1,17);                    //发送指令码
 201   2              }
 202   1              else
 203   1              {
 204   2                      Send_Bytes(ps2,17);                    //发送指令码
 205   2              }
 206   1              
 207   1              while(RI==0);
 208   1      
 209   1              if(Receive_Bytes(Data_buff,16))   //接收应答包
 210   1              {
 211   2                      return MI_ERR;  
 212   2              }               
 213   1      
 214   1      
 215   1              if(Data_buff[9]==0x00)             //判断确认码是否成功  
 216   1              {                                                          
 217   2                      return MI_OK;   
 218   2              }
 219   1              
 220   1              return MI_ERR;  
 221   1      } 
 222          
 223          void lock()
 224          { 
 225   1        if (locked == 0){
 226   2        Relay = 1;
 227   2        delayms(100);
 228   2        Time0_Init();
 229   2        count=0;
 230   2        jd = 2;
 231   2        delayms(500);
 232   2        locked = 1;
 233   2        Relay = 0;
 234   2        delayms(2500);
 235   2        }
 236   1      }
 237          
 238          void unlock()
 239          {
 240   1        if (locked == 1){   
C51 COMPILER V9.01   FINGERPRINTLOCK                                                       12/07/2019 23:08:07 PAGE 5   

 241   2          Relay = 1;
 242   2          delayms(100);
 243   2          Time0_Init();
 244   2          count=0;
 245   2          jd = 5;
 246   2          delayms(500);
 247   2          locked = 0;
 248   2          Relay = 0;
 249   2          if (check == 1){              //门未开时为高电平
 250   3                delayms(3500);
 251   3              }else{
 252   3                delayms(2500);
 253   3              }
 254   2                
 255   2        }              
 256   1      }                                                                
 257          
 258          void main()
 259          {
 260   1        check = 1;
 261   1        lock();
 262   1        unlock();
 263   1        lock();
 264   1        RI=0;
 265   1        while(1){
 266   2          char Re;
 267   2              UART_Init();
 268   2              Re = PS_GetImage();
 269   2          if(Re==MI_OK){ 
 270   3                Re = PS_GenChar(0x01);
 271   3            if(Re==MI_OK){
 272   4              Re = PS_Search(0x01);
 273   4              if(Re==MI_OK){
 274   5                        unlock();
 275   5                        lock();
 276   5                  }else{
 277   5                    //lock(); 
 278   5                  }
 279   4            }else{
 280   4                  //lock();
 281   4                }
 282   3          }else{
 283   3                //lock();
 284   3              }
 285   2        }
 286   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    538    ----
   CONSTANT SIZE    =     77    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
