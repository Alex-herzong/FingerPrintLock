C51 COMPILER V9.59.0.0   FINGERPRINTLOCK                                                   01/22/2020 17:46:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FINGERPRINTLOCK
OBJECT MODULE PLACED IN FingerPrintLock.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FingerPrintLock.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <reg52.h>
   2          #include <stdio.h> 
   3          #include <string.h>
   4          #include "AS608.h"
   5          unsigned char count;              //0.5ms次数标识
   6          sbit pwm =P1^0 ;                  //PWM信号输出,连舵机黄线
   7          sbit Relay =P1^1 ;
   8          sbit check = P2^0;
   9          unsigned char jd;                 //角度标识
  10          uchar xdata Data_buff[MAX];     //初始化结构体
  11          struct as608 As_608_data={0};
  12          int judge=1;
  13          char locked = 0;
  14          
  15          void delayms(unsigned int i)      //延时
  16          {
  17   1          unsigned int j,k;
  18   1          for(j=i; j>0; j--)
  19   1              for(k=110; k>0; k--);
  20   1      }
  21          
  22          void Time0_Init()                 //定时器0初始化
  23          {  
  24   1          TH0  = (65536-440)/256;     //1.0851us一个计数周期
  25   1          TL0  = (65536-440)%256;     //初始化中断器
  26   1          TMOD = 0x01;                  //定时器0工作在方式1
  27   1          IE = 0x82;                    //IE=0x82=1000 0010 等价于 EA=1 开总中断  ET0=1 开定时器0中断
  28   1          TR0=1;                        //开定时器0
  29   1      }
  30            
  31          void Time0_Int() interrupt 1      //中断程序
  32          {
  33   1          TH0  = (65536-440)/256;     //1.0851us一个计数周期
  34   1          TL0  = (65536-440)%256;     //重新初始化中断器
  35   1          if(count< jd)
  36   1          {
  37   2              pwm=0;                    //高电平次数小于目标角度，PWM输出高电平（一次高电平输出0.5ms）
  38   2            count=(count+1);          //总次数加1
  39   2              count=count%40;           //确保总次数始终保持低于40 即保持周期为20ms
  40   2          } else {
  41   2              pwm=1;                    //高电平次数大于等于目标角度，PWM输出低电平
  42   2            count=(count+1);          //总次数加1
  43   2              count=count%40;           //确保总次数始终保持低于40 即保持周期为20ms
  44   2          }
  45   1      
  46   1      }
  47          
  48          /*
  49          void SendOneByte(unsigned char c) //通过串口发送一个字节
  50          {
  51              SBUF = c;
  52              while(!TI);
  53              TI = 0;
  54          }
  55          */
C51 COMPILER V9.59.0.0   FINGERPRINTLOCK                                                   01/22/2020 17:46:33 PAGE 2   

  56          
  57          /*
  58          char putchar(char c)        //putchar 函数重写
  59          {
  60            SendOneByte(c);
  61            return c;
  62          }
  63          */
  64          void UART_Init(void)              //波特率已最高为57600，12T  晶振11.0592MHz
  65          {
  66   1        SCON = 0x50;
  67   1        TMOD &= 0x0f;
  68   1          TMOD = 0x20;
  69   1          PCON = 0x80;
  70   1          TH1 = 0xFF;
  71   1          TL1 = 0xFF; 
  72   1        ET1 = 0;
  73   1          TR1 = 1;
  74   1      }
  75          
  76          //*******************************************  
  77          //函数名：Send_Bytes
  78          //功能：发送多个字节
  79          //参数：*c:首地址    len：长度
  80          //指令代码：无
  81          //返回值：  无
  82          //******************************************* 
  83          void Send_Bytes(uchar *c,uchar len)
  84          {
  85   1        uchar i=0;
  86   1        for(i=0;i<len;i++)
  87   1        {
  88   2            SBUF = *(c+i);
  89   2            while(!TI);
  90   2            TI = 0;
  91   2        }
  92   1      }
  93          
  94          //*******************************************  
  95          //函数名：Receive_Bytes
  96          //功能：接收多个字节
  97          //参数：*c:首地址    len：长度
  98          //指令代码：无
  99          //返回值：  无
 100          //******************************************* 
 101          char Receive_Bytes(uchar *c,uchar len)
 102          {
 103   1        uchar i=0;
 104   1        uchar time=200;
 105   1        for(i=0;i<len;i++)
 106   1        {
 107   2          while(!RI && time--)
 108   2          {
 109   3            if(time<=1)
 110   3              return MI_NOTAGERR;
 111   3          }
 112   2            *(c+i)=SBUF;
 113   2          RI=0;
 114   2          } 
 115   1        return MI_OK;
 116   1      }
 117          
C51 COMPILER V9.59.0.0   FINGERPRINTLOCK                                                   01/22/2020 17:46:33 PAGE 3   

 118          //*******************************************  
 119          //函数名：PS_GetImage
 120          //功能：从传感器上读入图像存于图像缓冲区
 121          //参数：无
 122          //指令代码：01H
 123          //返回值：有
 124          //******************************************* 
 125          char PS_GetImage()
 126          {
 127   1      
 128   1        uchar *ps2=     "\xef\x01\xff\xff\xff\xff\x01\x00\x03\x01\x00\x05";  //指令码
 129   1      
 130   1        Send_Bytes(ps2,12);          //发送指令码
 131   1      
 132   1        while(RI==0);
 133   1      
 134   1        if(Receive_Bytes(Data_buff,12))   //接收应答包
 135   1        {
 136   2          return MI_ERR;  
 137   2        }   
 138   1      
 139   1        if(Data_buff[9]==0x00&&Data_buff[11]==0x0a)      //判断确认码是否成功   后面为校验和判断
 140   1        {                
 141   2          return MI_OK; 
 142   2        }
 143   1        
 144   1        return MI_ERR;  
 145   1      }
 146          
 147          //*******************************************  
 148          //函数名：PS_GenChar
 149          //功能：将 ImageBuffer(图像缓冲区) 中的原始图像生成指纹特征文件存于 CharBuffer1 或 CharBuffer2
 150          //参数：BufferID(特征缓冲区号)
 151          //指令代码：02H
 152          //返回值：有
 153          //******************************************* 
 154          char PS_GenChar(uchar BufferID)
 155          {
 156   1      
 157   1        uchar *ps1=     "\xef\x01\xff\xff\xff\xff\x01\x00\x04\x02\x01\x00\x08";  //存放CharBuffer1的指令码
 158   1        uchar *ps2=     "\xef\x01\xff\xff\xff\xff\x01\x00\x04\x02\x02\x00\x09";  //存放CharBuffer1的指令码
 159   1        if(BufferID==0x01)
 160   1        {
 161   2          Send_Bytes(ps1,13);          //发送指令码
 162   2        }
 163   1        else
 164   1        {
 165   2          Send_Bytes(ps2,13);          //发送指令码
 166   2        }
 167   1        
 168   1        while(RI==0);
 169   1      
 170   1        if(Receive_Bytes(Data_buff,12))   //接收应答包
 171   1        {
 172   2          return MI_ERR;  
 173   2        }   
 174   1        
 175   1        if(Data_buff[9]==0x00&&Data_buff[11]==0x0a)      //判断确认码是否成功   后面为校验和判断
 176   1        {                
 177   2          return MI_OK; 
 178   2        }
 179   1        
C51 COMPILER V9.59.0.0   FINGERPRINTLOCK                                                   01/22/2020 17:46:33 PAGE 4   

 180   1        return MI_ERR;  
 181   1      }
 182          
 183          //*******************************************  
 184          //函数名：PS_Search
 185          //功能：以 CharBuffer1 或 CharBuffer2 中的特征文件搜索整个或部分指纹库。若搜索到，则返回页码
 186          //参数：BufferID， (StartPage(起始页)，PageNum（页数）)(默认从0到300全局搜索)
 187          //指令代码：04H
 188          //返回值：确认码、页码（ID）
 189          //******************************************* 
 190          char PS_Search(uchar BufferID)
 191          {
 192   1      
 193   1        uchar *ps1=     "\xef\x01\xff\xff\xff\xff\x01\x00\x08\x04\x01\x00\x00\x01\x2b\x00\x3a";  //存放CharBuffer
             -1的指令码
 194   1        uchar *ps2=     "\xef\x01\xff\xff\xff\xff\x01\x00\x08\x04\x02\x00\x00\x01\x2b\x00\x3b";
 195   1        
 196   1      
 197   1        if(BufferID==0x01)
 198   1        {
 199   2          Send_Bytes(ps1,17);          //发送指令码
 200   2        }
 201   1        else
 202   1        {
 203   2          Send_Bytes(ps2,17);          //发送指令码
 204   2        }
 205   1        
 206   1        while(RI==0);
 207   1      
 208   1        if(Receive_Bytes(Data_buff,16))   //接收应答包
 209   1        {
 210   2          return MI_ERR;  
 211   2        }   
 212   1      
 213   1      
 214   1        if(Data_buff[9]==0x00)       //判断确认码是否成功  
 215   1        {                
 216   2          return MI_OK; 
 217   2        }
 218   1        
 219   1        return MI_ERR;  
 220   1      } 
 221          
 222          void lock()
 223          { 
 224   1        Relay = 1;
 225   1        delayms(100);
 226   1        Time0_Init();
 227   1        count=0;
 228   1        jd = 2;
 229   1        delayms(1000);
 230   1        locked = 1;
 231   1        Relay = 0;
 232   1      }
 233          
 234          void unlock()
 235          { 
 236   1        Relay = 1;
 237   1        delayms(100);
 238   1        Time0_Init();
 239   1        count=0;
 240   1        jd = 5;
C51 COMPILER V9.59.0.0   FINGERPRINTLOCK                                                   01/22/2020 17:46:33 PAGE 5   

 241   1        delayms(1000);
 242   1        if (check == 1){      //门未开时为高电平
 243   2          delayms(2500);
 244   2        }else{
 245   2          delayms(1500);
 246   2        }
 247   1        Time0_Init();
 248   1        count=0;
 249   1        jd = 2;
 250   1        delayms(1000);
 251   1        Relay = 0;    
 252   1      }
 253          void main()
 254          {
 255   1        check = 1;
 256   1        lock();
 257   1        unlock();
 258   1        RI=0;
 259   1        while(1){
 260   2          char Re;
 261   2        UART_Init();
 262   2        Re = PS_GetImage();
 263   2          if(Re==MI_OK){ 
 264   3          Re = PS_GenChar(0x01);
 265   3            if(Re==MI_OK){
 266   4              Re = PS_Search(0x01);
 267   4              if(Re==MI_OK){
 268   5            unlock();
 269   5            }else{
 270   5              Relay = 1;
 271   5            delayms(250);
 272   5            Relay = 0;
 273   5            delayms(250); 
 274   5            Relay = 1;
 275   5            delayms(250);
 276   5            Relay = 0;
 277   5            delayms(250); 
 278   5            } 
 279   4            }
 280   3          }
 281   2        }
 282   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    572    ----
   CONSTANT SIZE    =     77    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
